
plugins {

    id 'java'
    id 'war'
}

group 'com.iscas.web'
version '0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"

    mybatisGenerator
}

dependencies {

    mybatisGenerator "org.mybatis.generator:mybatis-generator-core:${generatorCoreVersion}"
    mybatisGenerator "mysql:mysql-connector-java:5.1.40"
    mybatisGenerator "tk.mybatis:mapper:${tkMybatisVersion}"

    //导入基础工具工程
    compile project (":common:common-tools")
    //导入web相关的基础工具工程
    compile project (":common:common-web-tools")
    //导入模板
    compile project (":templet")
    //protobuf

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-undertow'
    compile group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter',version:"${mybatisStaterVersion}"
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-websocket'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-config', version:"${springCloudConfigVersion}"
    compile('org.springframework.boot:spring-boot-starter-validation')

    //swagger
    compile group: 'io.springfox', name: 'springfox-swagger2', version: "${swaggerVersion}"
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: "${swaggerVersion}"
    // mysql连接
    compile group: 'mysql', name: 'mysql-connector-java', version: "${mysqlVersion}"
    //mybatis分页插件
    compile group: 'com.github.pagehelper', name: 'pagehelper-spring-boot-starter', version: "${pagehelperVersion}"
    //druid连接池配置
    compile group: 'com.alibaba', name: 'druid-spring-boot-starter', version: "${druidVersion}"

    // google guava
    compile group: 'com.google.guava', name: 'guava', version: "${guavaVersion}"

    //okhttp
    compile "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    //google caffeine
    compile group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: "${caffeineVersion}"
    //gson
    compile group: 'com.google.code.gson',name:'gson',version: "${gsonVersion}"

    //jwt
    compile group: 'com.auth0', name: 'java-jwt', version: "${jwtVersion}"

    //netty
//    compile group: 'io.netty', name: 'netty-all', version: "${nettyVersion}"
}


def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/mybatis/config.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.username")
    ant.properties['password'] = properties.getProperty("jdbc.password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("package.model")
    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/mybatis/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}


